name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
        
    - name: Install Dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Set up application for SQLite
      run: |
        touch database/database.sqlite
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=${{ github.workspace }}/database/database.sqlite" >> .env

    - name: Generate key
      run: php artisan key:generate
        
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
        
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: vendor/bin/phpunit

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Copy .env
        run: cp .env.example .env

      - name: Install Composer Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Generate Key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      # Additional build steps if needed

      - name: Archive Artifact
        uses: actions/upload-artifact@v2
        with:
          name: laravel-app
          path: .
    

  deploy:
    needs: [laravel-tests, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Install New Relic CLI
        run: |
          curl -Ls https://download.newrelic.com/install/newrelic-cli/scripts/install.sh | bash
  
      - name: Run New Relic Installation
        run: |
          sudo NEW_RELIC_API_KEY=${{ secrets.NEW_RELIC_API_KEY }} NEW_RELIC_ACCOUNT_ID=${{ secrets.NEW_RELIC_ACCOUNT_ID }} /usr/local/bin/newrelic install -n php-agent-installer
  
      # Notify New Relic about the deployment
      - name: Notify New Relic
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Api-Key: ${{ secrets.NEW_RELIC_API_KEY }}" \
            -d '{
              "deployment": {
                "revision": "${{ github.sha }}",
                "changelog": "Deployment changelog or description",
                "description": "Deployment description",
                "user": "${{ github.actor }}"
              }
            }' \
            "https://api.newrelic.com/v2/applications/${{ secrets.NEW_RELIC_ACCOUNT_ID }}/deployments.json"
        
        env:
          NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}

  rollback-check:
    runs-on: ubuntu-latest
    needs: [laravel-tests, build, deploy]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    
    - name: Rollback Check
      run: |
        # Your rollback check commands go here
        # Check if the previous version is working as expected
        # For demonstration purposes, echo a rollback check message
        echo "Rollback check successful!"

  rollback:
    runs-on: ubuntu-latest
    needs: [laravel-tests, build, deploy, rollback-check]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    
    - name: Rollback Deployment
      run: |
        # Your rollback commands go here
        # Rollback to the previous version in case of issues
        # For demonstration purposes, echo a rollback message
        echo "Rollback successful!"

  notifications:
    runs-on: ubuntu-latest
    needs: [laravel-tests, build, deploy, rollback-check, rollback]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 14
  
      - name: Install dependencies
        run: npm install
  
      - name: Send notification
        run: |
          # Use SendGrid API key to authenticate
          SENDGRID_API_KEY=$SENDGRID_API_KEY  # Set your SendGrid API key as a secret in your repository
  
          # Replace the following variables with your actual values
          TO_EMAIL=rakesh@vibhuti.biz
          FROM_EMAIL=rakesh@vibhuti.biz
          SUBJECT="GitHub Action Notification"
          BODY="Your custom notification message goes here."
  
          # Send email using curl and SendGrid API
          curl -X "POST" "https://api.sendgrid.com/v3/mail/send" \
            -H "Authorization: Bearer $SENDGRID_API_KEY" \
            -H "Content-Type: application/json" \
            -d $'{
              "personalizations": [
                {
                  "to": [
                    {
                      "email": "'"$TO_EMAIL"'"
                    }
                  ],
                  "subject": "'"$SUBJECT"'"
                }
              ],
              "from": {
                "email": "'"$FROM_EMAIL"'"
              },
              "content": [
                {
                  "type": "text/plain",
                  "value": "'"$BODY"'"
                }
              ]
            }'
  
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
